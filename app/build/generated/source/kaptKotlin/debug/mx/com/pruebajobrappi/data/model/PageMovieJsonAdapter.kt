// Code generated by moshi-kotlin-codegen. Do not edit.
package mx.com.pruebajobrappi.data.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonDataException
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.collections.MutableList
import mx.com.pruebajobrappi.data.models.MovieData

class PageMovieJsonAdapter(moshi: Moshi) : JsonAdapter<PageMovie>() {
    private val options: JsonReader.Options =
            JsonReader.Options.of("page", "total_pages", "results")

    private val nullableIntAdapter: JsonAdapter<Int?> = moshi.adapter(Int::class.java).nullSafe()

    private val mutableListOfMovieDataAdapter: JsonAdapter<MutableList<MovieData>> =
            moshi.adapter<MutableList<MovieData>>(Types.newParameterizedType(MutableList::class.java, MovieData::class.java)).nonNull()

    override fun toString(): String = "GeneratedJsonAdapter(PageMovie)"

    override fun fromJson(reader: JsonReader): PageMovie {
        var page: Int? = null
        var pageSet: Boolean = false
        var totalPage: Int? = null
        var totalPageSet: Boolean = false
        var results: MutableList<MovieData>? = null
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 ->  {
                    page = nullableIntAdapter.fromJson(reader)
                    pageSet = true
                }
                1 ->  {
                    totalPage = nullableIntAdapter.fromJson(reader)
                    totalPageSet = true
                }
                2 -> results = mutableListOfMovieDataAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'results' was null at ${reader.path}")
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = PageMovie()
        result = result.copy(
                page = if (pageSet) page else result.page,
                totalPage = if (totalPageSet) totalPage else result.totalPage,
                results = results ?: result.results)
        return result
    }

    override fun toJson(writer: JsonWriter, value: PageMovie?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("page")
        nullableIntAdapter.toJson(writer, value.page)
        writer.name("total_pages")
        nullableIntAdapter.toJson(writer, value.totalPage)
        writer.name("results")
        mutableListOfMovieDataAdapter.toJson(writer, value.results)
        writer.endObject()
    }
}
