// Code generated by moshi-kotlin-codegen. Do not edit.
package mx.com.pruebajobrappi.data.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonDataException
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.Long
import kotlin.String
import kotlin.collections.MutableList
import mx.com.pruebajobrappi.data.models.VideoTrailerData

class VideoTrailerJsonAdapter(moshi: Moshi) : JsonAdapter<VideoTrailer>() {
    private val options: JsonReader.Options = JsonReader.Options.of("id", "results")

    private val nullableLongAdapter: JsonAdapter<Long?> = moshi.adapter(Long::class.java).nullSafe()

    private val mutableListOfVideoTrailerDataAdapter: JsonAdapter<MutableList<VideoTrailerData>> =
            moshi.adapter<MutableList<VideoTrailerData>>(Types.newParameterizedType(MutableList::class.java, VideoTrailerData::class.java)).nonNull()

    override fun toString(): String = "GeneratedJsonAdapter(VideoTrailer)"

    override fun fromJson(reader: JsonReader): VideoTrailer {
        var id: Long? = null
        var idSet: Boolean = false
        var results: MutableList<VideoTrailerData>? = null
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 ->  {
                    id = nullableLongAdapter.fromJson(reader)
                    idSet = true
                }
                1 -> results = mutableListOfVideoTrailerDataAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'results' was null at ${reader.path}")
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = VideoTrailer()
        result = result.copy(
                id = if (idSet) id else result.id,
                results = results ?: result.results)
        return result
    }

    override fun toJson(writer: JsonWriter, value: VideoTrailer?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("id")
        nullableLongAdapter.toJson(writer, value.id)
        writer.name("results")
        mutableListOfVideoTrailerDataAdapter.toJson(writer, value.results)
        writer.endObject()
    }
}
